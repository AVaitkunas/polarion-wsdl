// Code generated by gowsdl DO NOT EDIT.

package test_ws

import (
	"context"
	"encoding/xml"
	"time"

	"github.com/hooklift/gowsdl/soap"
)

// against "unused imports"
var (
	_ time.Time
	_ xml.Name
)

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type AddAttachmentToTestRecord struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addAttachmentToTestRecord"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	Index int32 `xml:"index,omitempty" json:"index,omitempty"`

	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`

	Title string `xml:"title,omitempty" json:"title,omitempty"`

	Data []byte `xml:"data,omitempty" json:"data,omitempty"`
}

type AddAttachmentToTestRecordResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addAttachmentToTestRecordResponse"`
}

type AddAttachmentToTestRun struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addAttachmentToTestRun"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`

	Title string `xml:"title,omitempty" json:"title,omitempty"`

	Data []byte `xml:"data,omitempty" json:"data,omitempty"`
}

type AddAttachmentToTestRunResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addAttachmentToTestRunResponse"`
}

type AddAttachmentToTestStep struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addAttachmentToTestStep"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	Index int32 `xml:"index,omitempty" json:"index,omitempty"`

	TestStepIndex int32 `xml:"testStepIndex,omitempty" json:"testStepIndex,omitempty"`

	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`

	Title string `xml:"title,omitempty" json:"title,omitempty"`

	Data []byte `xml:"data,omitempty" json:"data,omitempty"`
}

type AddAttachmentToTestStepResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addAttachmentToTestStepResponse"`
}

type AddProjectToProjectSpan struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addProjectToProjectSpan"`

	Uri *SubterraURI `xml:"uri,omitempty" json:"uri,omitempty"`

	ProjectId string `xml:"projectId,omitempty" json:"projectId,omitempty"`
}

type AddProjectToProjectSpanResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addProjectToProjectSpanResponse"`
}

type AddTestRecord struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addTestRecord"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	TestCaseUri *SubterraURI `xml:"testCaseUri,omitempty" json:"testCaseUri,omitempty"`

	TestResultId string `xml:"testResultId,omitempty" json:"testResultId,omitempty"`

	TestComment *Text `xml:"testComment,omitempty" json:"testComment,omitempty"`

	ExecutedByUri *SubterraURI `xml:"executedByUri,omitempty" json:"executedByUri,omitempty"`

	Executed soap.XSDDateTime `xml:"executed,omitempty" json:"executed,omitempty"`

	Duration float32 `xml:"duration,omitempty" json:"duration,omitempty"`

	DefectUri *SubterraURI `xml:"defectUri,omitempty" json:"defectUri,omitempty"`
}

type AddTestRecordResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addTestRecordResponse"`
}

type AddTestRecordToTestRun struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addTestRecordToTestRun"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	TestRecord *TestRecord `xml:"testRecord,omitempty" json:"testRecord,omitempty"`
}

type AddTestRecordToTestRunResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl addTestRecordToTestRunResponse"`
}

type CreateSummaryDefect struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl createSummaryDefect"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	DefectTemplateUri *SubterraURI `xml:"defectTemplateUri,omitempty" json:"defectTemplateUri,omitempty"`
}

type CreateSummaryDefectResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl createSummaryDefectResponse"`

	CreateSummaryDefectReturn *SubterraURI `xml:"createSummaryDefectReturn,omitempty" json:"createSummaryDefectReturn,omitempty"`
}

type CreateTestRun struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl createTestRun"`

	Project string `xml:"project,omitempty" json:"project,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Template string `xml:"template,omitempty" json:"template,omitempty"`
}

type CreateTestRunResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl createTestRunResponse"`

	CreateTestRunReturn *SubterraURI `xml:"createTestRunReturn,omitempty" json:"createTestRunReturn,omitempty"`
}

type CreateTestRunWithTitle struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl createTestRunWithTitle"`

	Project string `xml:"project,omitempty" json:"project,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Title string `xml:"title,omitempty" json:"title,omitempty"`

	Template string `xml:"template,omitempty" json:"template,omitempty"`
}

type CreateTestRunWithTitleResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl createTestRunWithTitleResponse"`

	CreateTestRunWithTitleReturn *SubterraURI `xml:"createTestRunWithTitleReturn,omitempty" json:"createTestRunWithTitleReturn,omitempty"`
}

type DeleteAttachmentFromTestRecord struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl deleteAttachmentFromTestRecord"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	Index int32 `xml:"index,omitempty" json:"index,omitempty"`

	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`
}

type DeleteAttachmentFromTestRecordResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl deleteAttachmentFromTestRecordResponse"`
}

type DeleteAttachmentFromTestStep struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl deleteAttachmentFromTestStep"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	Index int32 `xml:"index,omitempty" json:"index,omitempty"`

	TestStepIndex int32 `xml:"testStepIndex,omitempty" json:"testStepIndex,omitempty"`

	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`
}

type DeleteAttachmentFromTestStepResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl deleteAttachmentFromTestStepResponse"`
}

type DeleteTestRunAttachment struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl deleteTestRunAttachment"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`
}

type DeleteTestRunAttachmentResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl deleteTestRunAttachmentResponse"`
}

type ExecuteTest struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl executeTest"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	TestRecords []*TestRecord `xml:"testRecords,omitempty" json:"testRecords,omitempty"`
}

type ExecuteTestResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl executeTestResponse"`
}

type GetDefinedTestRunCustomFieldKeys struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getDefinedTestRunCustomFieldKeys"`

	ProjectID string `xml:"projectID,omitempty" json:"projectID,omitempty"`
}

type GetDefinedTestRunCustomFieldKeysResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getDefinedTestRunCustomFieldKeysResponse"`

	GetDefinedTestRunCustomFieldKeysReturn []string `xml:"getDefinedTestRunCustomFieldKeysReturn,omitempty" json:"getDefinedTestRunCustomFieldKeysReturn,omitempty"`
}

type GetDefinedTestRunCustomFieldType struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getDefinedTestRunCustomFieldType"`

	ProjectID string `xml:"projectID,omitempty" json:"projectID,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`
}

type GetDefinedTestRunCustomFieldTypeResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getDefinedTestRunCustomFieldTypeResponse"`

	GetDefinedTestRunCustomFieldTypeReturn *CustomFieldType `xml:"getDefinedTestRunCustomFieldTypeReturn,omitempty" json:"getDefinedTestRunCustomFieldTypeReturn,omitempty"`
}

type GetDefinedTestRunCustomFieldTypes struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getDefinedTestRunCustomFieldTypes"`

	ProjectID string `xml:"projectID,omitempty" json:"projectID,omitempty"`
}

type GetDefinedTestRunCustomFieldTypesResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getDefinedTestRunCustomFieldTypesResponse"`

	GetDefinedTestRunCustomFieldTypesReturn []*CustomFieldType `xml:"getDefinedTestRunCustomFieldTypesReturn,omitempty" json:"getDefinedTestRunCustomFieldTypesReturn,omitempty"`
}

type GetTestCaseParameterNames struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestCaseParameterNames"`

	TestCaseUri *SubterraURI `xml:"testCaseUri,omitempty" json:"testCaseUri,omitempty"`
}

type GetTestCaseParameterNamesResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestCaseParameterNamesResponse"`

	GetTestCaseParameterNamesReturn []string `xml:"getTestCaseParameterNamesReturn,omitempty" json:"getTestCaseParameterNamesReturn,omitempty"`
}

type GetTestCaseRecords struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestCaseRecords"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	TestCaseUri *SubterraURI `xml:"testCaseUri,omitempty" json:"testCaseUri,omitempty"`
}

type GetTestCaseRecordsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestCaseRecordsResponse"`

	GetTestCaseRecordsReturn []*TestRecord `xml:"getTestCaseRecordsReturn,omitempty" json:"getTestCaseRecordsReturn,omitempty"`
}

type GetTestParametersLibrary struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestParametersLibrary"`

	ProjectId string `xml:"projectId,omitempty" json:"projectId,omitempty"`
}

type GetTestParametersLibraryResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestParametersLibraryResponse"`

	GetTestParametersLibraryReturn *ParametersLibrary `xml:"getTestParametersLibraryReturn,omitempty" json:"getTestParametersLibraryReturn,omitempty"`
}

type GetTestRunAttachment struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunAttachment"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	Filename string `xml:"filename,omitempty" json:"filename,omitempty"`
}

type GetTestRunAttachmentResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunAttachmentResponse"`

	GetTestRunAttachmentReturn *TestRunAttachment `xml:"getTestRunAttachmentReturn,omitempty" json:"getTestRunAttachmentReturn,omitempty"`
}

type GetTestRunAttachments struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunAttachments"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`
}

type GetTestRunAttachmentsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunAttachmentsResponse"`

	GetTestRunAttachmentsReturn []*TestRunAttachment `xml:"getTestRunAttachmentsReturn,omitempty" json:"getTestRunAttachmentsReturn,omitempty"`
}

type GetTestRunById struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunById"`

	Project string `xml:"project,omitempty" json:"project,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type GetTestRunByIdResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunByIdResponse"`

	GetTestRunByIdReturn *TestRun `xml:"getTestRunByIdReturn,omitempty" json:"getTestRunByIdReturn,omitempty"`
}

type GetTestRunByIdWithFields struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunByIdWithFields"`

	Project string `xml:"project,omitempty" json:"project,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Keys []string `xml:"keys,omitempty" json:"keys,omitempty"`
}

type GetTestRunByIdWithFieldsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunByIdWithFieldsResponse"`

	GetTestRunByIdWithFieldsReturn *TestRun `xml:"getTestRunByIdWithFieldsReturn,omitempty" json:"getTestRunByIdWithFieldsReturn,omitempty"`
}

type GetTestRunByUri struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunByUri"`

	Uri *SubterraURI `xml:"uri,omitempty" json:"uri,omitempty"`
}

type GetTestRunByUriResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunByUriResponse"`

	GetTestRunByUriReturn *TestRun `xml:"getTestRunByUriReturn,omitempty" json:"getTestRunByUriReturn,omitempty"`
}

type GetTestRunByUriWithFields struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunByUriWithFields"`

	Uri *SubterraURI `xml:"uri,omitempty" json:"uri,omitempty"`

	Keys []string `xml:"keys,omitempty" json:"keys,omitempty"`
}

type GetTestRunByUriWithFieldsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunByUriWithFieldsResponse"`

	GetTestRunByUriWithFieldsReturn *TestRun `xml:"getTestRunByUriWithFieldsReturn,omitempty" json:"getTestRunByUriWithFieldsReturn,omitempty"`
}

type GetTestRunCustomFieldType struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunCustomFieldType"`

	TestRunURI *SubterraURI `xml:"testRunURI,omitempty" json:"testRunURI,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`
}

type GetTestRunCustomFieldTypeResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunCustomFieldTypeResponse"`

	GetTestRunCustomFieldTypeReturn *CustomFieldType `xml:"getTestRunCustomFieldTypeReturn,omitempty" json:"getTestRunCustomFieldTypeReturn,omitempty"`
}

type GetTestRunCustomFieldTypes struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunCustomFieldTypes"`

	TestRunURI *SubterraURI `xml:"testRunURI,omitempty" json:"testRunURI,omitempty"`
}

type GetTestRunCustomFieldTypesResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestRunCustomFieldTypesResponse"`

	GetTestRunCustomFieldTypesReturn []*CustomFieldType `xml:"getTestRunCustomFieldTypesReturn,omitempty" json:"getTestRunCustomFieldTypesReturn,omitempty"`
}

type GetTestSteps struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestSteps"`

	Uri *SubterraURI `xml:"uri,omitempty" json:"uri,omitempty"`
}

type GetTestStepsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestStepsResponse"`

	GetTestStepsReturn *TestSteps `xml:"getTestStepsReturn,omitempty" json:"getTestStepsReturn,omitempty"`
}

type GetTestStepsConfiguration struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestStepsConfiguration"`

	ProjectId string `xml:"projectId,omitempty" json:"projectId,omitempty"`
}

type GetTestStepsConfigurationResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestStepsConfigurationResponse"`

	GetTestStepsConfigurationReturn []*EnumOption `xml:"getTestStepsConfigurationReturn,omitempty" json:"getTestStepsConfigurationReturn,omitempty"`
}

type GetTestsConfiguration struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestsConfiguration"`

	ProjectId string `xml:"projectId,omitempty" json:"projectId,omitempty"`
}

type GetTestsConfigurationResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getTestsConfigurationResponse"`

	GetTestsConfigurationReturn *TestsConfiguration `xml:"getTestsConfigurationReturn,omitempty" json:"getTestsConfigurationReturn,omitempty"`
}

type GetWikiContentForTestRun struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getWikiContentForTestRun"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`
}

type GetWikiContentForTestRunResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl getWikiContentForTestRunResponse"`

	GetWikiContentForTestRunReturn *Text `xml:"getWikiContentForTestRunReturn,omitempty" json:"getWikiContentForTestRunReturn,omitempty"`
}

type RemoveProjectFromProjectSpan struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl removeProjectFromProjectSpan"`

	Uri *SubterraURI `xml:"uri,omitempty" json:"uri,omitempty"`

	ProjectId string `xml:"projectId,omitempty" json:"projectId,omitempty"`
}

type RemoveProjectFromProjectSpanResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl removeProjectFromProjectSpanResponse"`
}

type SearchTestRecords struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRecords"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Sort string `xml:"sort,omitempty" json:"sort,omitempty"`

	Limit int32 `xml:"limit,omitempty" json:"limit,omitempty"`
}

type SearchTestRecordsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRecordsResponse"`

	SearchTestRecordsReturn []*TestRecord `xml:"searchTestRecordsReturn,omitempty" json:"searchTestRecordsReturn,omitempty"`
}

type SearchTestRunTemplates struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunTemplates"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Sort string `xml:"sort,omitempty" json:"sort,omitempty"`
}

type SearchTestRunTemplatesResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunTemplatesResponse"`

	SearchTestRunTemplatesReturn []*TestRun `xml:"searchTestRunTemplatesReturn,omitempty" json:"searchTestRunTemplatesReturn,omitempty"`
}

type SearchTestRunTemplatesLimited struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunTemplatesLimited"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Sort string `xml:"sort,omitempty" json:"sort,omitempty"`

	ResultsLimit int32 `xml:"resultsLimit,omitempty" json:"resultsLimit,omitempty"`
}

type SearchTestRunTemplatesLimitedResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunTemplatesLimitedResponse"`

	SearchTestRunTemplatesLimitedReturn []*TestRun `xml:"searchTestRunTemplatesLimitedReturn,omitempty" json:"searchTestRunTemplatesLimitedReturn,omitempty"`
}

type SearchTestRunTemplatesWithFields struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunTemplatesWithFields"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Sort string `xml:"sort,omitempty" json:"sort,omitempty"`

	Fields []string `xml:"fields,omitempty" json:"fields,omitempty"`
}

type SearchTestRunTemplatesWithFieldsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunTemplatesWithFieldsResponse"`

	SearchTestRunTemplatesWithFieldsReturn []*TestRun `xml:"searchTestRunTemplatesWithFieldsReturn,omitempty" json:"searchTestRunTemplatesWithFieldsReturn,omitempty"`
}

type SearchTestRunTemplatesWithFieldsLimited struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunTemplatesWithFieldsLimited"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Sort string `xml:"sort,omitempty" json:"sort,omitempty"`

	Fields []string `xml:"fields,omitempty" json:"fields,omitempty"`

	ResultsLimit int32 `xml:"resultsLimit,omitempty" json:"resultsLimit,omitempty"`
}

type SearchTestRunTemplatesWithFieldsLimitedResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunTemplatesWithFieldsLimitedResponse"`

	SearchTestRunTemplatesWithFieldsLimitedReturn []*TestRun `xml:"searchTestRunTemplatesWithFieldsLimitedReturn,omitempty" json:"searchTestRunTemplatesWithFieldsLimitedReturn,omitempty"`
}

type SearchTestRuns struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRuns"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Sort string `xml:"sort,omitempty" json:"sort,omitempty"`
}

type SearchTestRunsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunsResponse"`

	SearchTestRunsReturn []*TestRun `xml:"searchTestRunsReturn,omitempty" json:"searchTestRunsReturn,omitempty"`
}

type SearchTestRunsLimited struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunsLimited"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Sort string `xml:"sort,omitempty" json:"sort,omitempty"`

	ResultsLimit int32 `xml:"resultsLimit,omitempty" json:"resultsLimit,omitempty"`
}

type SearchTestRunsLimitedResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunsLimitedResponse"`

	SearchTestRunsLimitedReturn []*TestRun `xml:"searchTestRunsLimitedReturn,omitempty" json:"searchTestRunsLimitedReturn,omitempty"`
}

type SearchTestRunsWithFields struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunsWithFields"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Sort string `xml:"sort,omitempty" json:"sort,omitempty"`

	Fields []string `xml:"fields,omitempty" json:"fields,omitempty"`
}

type SearchTestRunsWithFieldsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunsWithFieldsResponse"`

	SearchTestRunsWithFieldsReturn []*TestRun `xml:"searchTestRunsWithFieldsReturn,omitempty" json:"searchTestRunsWithFieldsReturn,omitempty"`
}

type SearchTestRunsWithFieldsLimited struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunsWithFieldsLimited"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Sort string `xml:"sort,omitempty" json:"sort,omitempty"`

	Fields []string `xml:"fields,omitempty" json:"fields,omitempty"`

	ResultsLimit int32 `xml:"resultsLimit,omitempty" json:"resultsLimit,omitempty"`
}

type SearchTestRunsWithFieldsLimitedResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl searchTestRunsWithFieldsLimitedResponse"`

	SearchTestRunsWithFieldsLimitedReturn []*TestRun `xml:"searchTestRunsWithFieldsLimitedReturn,omitempty" json:"searchTestRunsWithFieldsLimitedReturn,omitempty"`
}

type SetTestSteps struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl setTestSteps"`

	WorkItemURI *SubterraURI `xml:"workItemURI,omitempty" json:"workItemURI,omitempty"`

	TestSteps []*TestStep `xml:"testSteps,omitempty" json:"testSteps,omitempty"`
}

type SetTestStepsResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl setTestStepsResponse"`
}

type UpdateSummaryDefect struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateSummaryDefect"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	TotalFailures int32 `xml:"totalFailures,omitempty" json:"totalFailures,omitempty"`

	TotalErrors int32 `xml:"totalErrors,omitempty" json:"totalErrors,omitempty"`

	TotalTests int32 `xml:"totalTests,omitempty" json:"totalTests,omitempty"`

	DefectTemplateUri *SubterraURI `xml:"defectTemplateUri,omitempty" json:"defectTemplateUri,omitempty"`
}

type UpdateSummaryDefectResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateSummaryDefectResponse"`

	UpdateSummaryDefectReturn *SubterraURI `xml:"updateSummaryDefectReturn,omitempty" json:"updateSummaryDefectReturn,omitempty"`
}

type UpdateTestRecord struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateTestRecord"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	Index int32 `xml:"index,omitempty" json:"index,omitempty"`

	TestResultId string `xml:"testResultId,omitempty" json:"testResultId,omitempty"`

	TestComment *Text `xml:"testComment,omitempty" json:"testComment,omitempty"`

	ExecutedByUri *SubterraURI `xml:"executedByUri,omitempty" json:"executedByUri,omitempty"`

	Executed soap.XSDDateTime `xml:"executed,omitempty" json:"executed,omitempty"`

	Duration float32 `xml:"duration,omitempty" json:"duration,omitempty"`

	DefectUri *SubterraURI `xml:"defectUri,omitempty" json:"defectUri,omitempty"`
}

type UpdateTestRecordResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateTestRecordResponse"`
}

type UpdateTestRecordAtIndex struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateTestRecordAtIndex"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	Index int32 `xml:"index,omitempty" json:"index,omitempty"`

	TestRecord *TestRecord `xml:"testRecord,omitempty" json:"testRecord,omitempty"`
}

type UpdateTestRecordAtIndexResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateTestRecordAtIndexResponse"`
}

type UpdateTestRun struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateTestRun"`

	Content *TestRun `xml:"content,omitempty" json:"content,omitempty"`
}

type UpdateTestRunResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateTestRunResponse"`
}

type UpdateTestRunAttachment struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateTestRunAttachment"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`

	Title string `xml:"title,omitempty" json:"title,omitempty"`

	Data []byte `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateTestRunAttachmentResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateTestRunAttachmentResponse"`
}

type UpdateWikiContentForTestRun struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateWikiContentForTestRun"`

	TestRunUri *SubterraURI `xml:"testRunUri,omitempty" json:"testRunUri,omitempty"`

	Content *Text `xml:"content,omitempty" json:"content,omitempty"`
}

type UpdateWikiContentForTestRunResponse struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/TestManagementWebService-impl updateWikiContentForTestRunResponse"`
}

type SubterraURI string

type Location string

type Currency float64

type Text struct {
	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Content string `xml:"content,omitempty" json:"content,omitempty"`

	ContentLossy bool `xml:"contentLossy,omitempty" json:"contentLossy,omitempty"`
}

type ArrayOfSubterraURI struct {
	SubterraURI []*SubterraURI `xml:"SubterraURI,omitempty" json:"SubterraURI,omitempty"`
}

type ArrayOfstring struct {
	Astring []string `xml:"string,omitempty" json:"string,omitempty"`
}

type ArrayOfText struct {
	Text []*Text `xml:"Text,omitempty" json:"Text,omitempty"`
}

type Property struct {
	XMLName xml.Name `xml:"http://ws.polarion.com/types property"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *string `xml:"value,omitempty" json:"value,omitempty"`
}

type Properties struct {
	Property []*Property `xml:"property,omitempty" json:"property,omitempty"`
}

type User struct {
	Description *Text `xml:"description,omitempty" json:"description,omitempty"`

	DisabledNotifications bool `xml:"disabledNotifications,omitempty" json:"disabledNotifications,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	HomePageContent *Text `xml:"homePageContent,omitempty" json:"homePageContent,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	VoteURIs *ArrayOfSubterraURI `xml:"voteURIs,omitempty" json:"voteURIs,omitempty"`

	WatcheURIs *ArrayOfSubterraURI `xml:"watcheURIs,omitempty" json:"watcheURIs,omitempty"`

	Uri *SubterraURI `xml:"uri,attr,omitempty" json:"uri,omitempty"`

	Unresolvable bool `xml:"unresolvable,attr,omitempty" json:"unresolvable,omitempty"`
}

type Project struct {
	Active bool `xml:"active,omitempty" json:"active,omitempty"`

	Color string `xml:"color,omitempty" json:"color,omitempty"`

	Description *Text `xml:"description,omitempty" json:"description,omitempty"`

	Finish soap.XSDDate `xml:"finish,omitempty" json:"finish,omitempty"`

	Icon string `xml:"icon,omitempty" json:"icon,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Lead *User `xml:"lead,omitempty" json:"lead,omitempty"`

	Location *Location `xml:"location,omitempty" json:"location,omitempty"`

	LockWorkRecordsDate soap.XSDDate `xml:"lockWorkRecordsDate,omitempty" json:"lockWorkRecordsDate,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ProjectGroupURI *SubterraURI `xml:"projectGroupURI,omitempty" json:"projectGroupURI,omitempty"`

	Start soap.XSDDate `xml:"start,omitempty" json:"start,omitempty"`

	TrackerPrefix string `xml:"trackerPrefix,omitempty" json:"trackerPrefix,omitempty"`

	Uri *SubterraURI `xml:"uri,attr,omitempty" json:"uri,omitempty"`

	Unresolvable bool `xml:"unresolvable,attr,omitempty" json:"unresolvable,omitempty"`
}

type TestRunAttachment struct {
	Author *User `xml:"author,omitempty" json:"author,omitempty"`

	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Length int64 `xml:"length,omitempty" json:"length,omitempty"`

	TestRunURI *SubterraURI `xml:"testRunURI,omitempty" json:"testRunURI,omitempty"`

	Title string `xml:"title,omitempty" json:"title,omitempty"`

	Updated soap.XSDDateTime `xml:"updated,omitempty" json:"updated,omitempty"`

	Url string `xml:"url,omitempty" json:"url,omitempty"`

	Uri *SubterraURI `xml:"uri,attr,omitempty" json:"uri,omitempty"`

	Unresolvable bool `xml:"unresolvable,attr,omitempty" json:"unresolvable,omitempty"`
}

type ArrayOfTestRunAttachment struct {
	TestRunAttachment []*TestRunAttachment `xml:"TestRunAttachment,omitempty" json:"TestRunAttachment,omitempty"`
}

type EnumOptionId struct {
	Id *string `xml:"id,omitempty" json:"id,omitempty"`
}

type CustomFieldType struct {
	DefaultValue *AnyType `xml:"defaultValue,omitempty" json:"defaultValue,omitempty"`

	DependsOn *string `xml:"dependsOn,omitempty" json:"dependsOn,omitempty"`

	Description *string `xml:"description,omitempty" json:"description,omitempty"`

	Id *string `xml:"id,omitempty" json:"id,omitempty"`

	Multi bool `xml:"multi,omitempty" json:"multi,omitempty"`

	Name *string `xml:"name,omitempty" json:"name,omitempty"`

	Required bool `xml:"required,omitempty" json:"required,omitempty"`

	// Type_ *QName `xml:"type,omitempty" json:"type,omitempty"`
}

type ArrayOfEnumOptionId struct {
	EnumOptionId []*EnumOptionId `xml:"EnumOptionId,omitempty" json:"EnumOptionId,omitempty"`
}

type TestRunComment struct {
	Author *User `xml:"author,omitempty" json:"author,omitempty"`

	ChildCommentURIs *ArrayOfSubterraURI `xml:"childCommentURIs,omitempty" json:"childCommentURIs,omitempty"`

	Created soap.XSDDateTime `xml:"created,omitempty" json:"created,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	ParentCommentURI *SubterraURI `xml:"parentCommentURI,omitempty" json:"parentCommentURI,omitempty"`

	Resolved bool `xml:"resolved,omitempty" json:"resolved,omitempty"`

	Tags *ArrayOfEnumOptionId `xml:"tags,omitempty" json:"tags,omitempty"`

	Text *Text `xml:"text,omitempty" json:"text,omitempty"`

	Title string `xml:"title,omitempty" json:"title,omitempty"`

	Uri *SubterraURI `xml:"uri,attr,omitempty" json:"uri,omitempty"`

	Unresolvable bool `xml:"unresolvable,attr,omitempty" json:"unresolvable,omitempty"`
}

type ArrayOfTestRunComment struct {
	TestRunComment []*TestRunComment `xml:"TestRunComment,omitempty" json:"TestRunComment,omitempty"`
}

type ImportedComment struct {
	Author string `xml:"author,omitempty" json:"author,omitempty"`

	Created soap.XSDDateTime `xml:"created,omitempty" json:"created,omitempty"`

	Initials string `xml:"initials,omitempty" json:"initials,omitempty"`
}

type ModuleComment struct {
	Author *User `xml:"author,omitempty" json:"author,omitempty"`

	ChildCommentURIs *ArrayOfSubterraURI `xml:"childCommentURIs,omitempty" json:"childCommentURIs,omitempty"`

	Created soap.XSDDateTime `xml:"created,omitempty" json:"created,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	ImportedComment *ImportedComment `xml:"importedComment,omitempty" json:"importedComment,omitempty"`

	ParentCommentURI *SubterraURI `xml:"parentCommentURI,omitempty" json:"parentCommentURI,omitempty"`

	ReferredWorkItemURI *SubterraURI `xml:"referredWorkItemURI,omitempty" json:"referredWorkItemURI,omitempty"`

	Resolved bool `xml:"resolved,omitempty" json:"resolved,omitempty"`

	Tags *ArrayOfEnumOptionId `xml:"tags,omitempty" json:"tags,omitempty"`

	Text *Text `xml:"text,omitempty" json:"text,omitempty"`

	Uri *SubterraURI `xml:"uri,attr,omitempty" json:"uri,omitempty"`

	Unresolvable bool `xml:"unresolvable,attr,omitempty" json:"unresolvable,omitempty"`
}

type ArrayOfModuleComment struct {
	ModuleComment []*ModuleComment `xml:"ModuleComment,omitempty" json:"ModuleComment,omitempty"`
}

type LinkedOslcResource struct {
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Revision string `xml:"revision,omitempty" json:"revision,omitempty"`

	Role *EnumOptionId `xml:"role,omitempty" json:"role,omitempty"`

	Uri string `xml:"uri,omitempty" json:"uri,omitempty"`
}

type ArrayOfLinkedOslcResource struct {
	LinkedOslcResource []*LinkedOslcResource `xml:"LinkedOslcResource,omitempty" json:"LinkedOslcResource,omitempty"`
}

type Custom struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *AnyType `xml:"value,omitempty" json:"value,omitempty"`
}

type ArrayOfCustom struct {
	Custom []*Custom `xml:"Custom,omitempty" json:"Custom,omitempty"`
}

type Module struct {
	AllowedWITypes *ArrayOfEnumOptionId `xml:"allowedWITypes,omitempty" json:"allowedWITypes,omitempty"`

	AreLinksFromParentToChild bool `xml:"areLinksFromParentToChild,omitempty" json:"areLinksFromParentToChild,omitempty"`

	Author *User `xml:"author,omitempty" json:"author,omitempty"`

	AutoSuspect bool `xml:"autoSuspect,omitempty" json:"autoSuspect,omitempty"`

	BranchedFrom *Module `xml:"branchedFrom,omitempty" json:"branchedFrom,omitempty"`

	BranchedWithQuery string `xml:"branchedWithQuery,omitempty" json:"branchedWithQuery,omitempty"`

	Comments *ArrayOfModuleComment `xml:"comments,omitempty" json:"comments,omitempty"`

	Created soap.XSDDateTime `xml:"created,omitempty" json:"created,omitempty"`

	DerivedFields *ArrayOfstring `xml:"derivedFields,omitempty" json:"derivedFields,omitempty"`

	DerivedFromURI *SubterraURI `xml:"derivedFromURI,omitempty" json:"derivedFromURI,omitempty"`

	DerivedFromLinkRole *EnumOptionId `xml:"derivedFromLinkRole,omitempty" json:"derivedFromLinkRole,omitempty"`

	HeadingSidebarFields string `xml:"headingSidebarFields,omitempty" json:"headingSidebarFields,omitempty"`

	HomePageContent *Text `xml:"homePageContent,omitempty" json:"homePageContent,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	LinkedOslcResources *ArrayOfLinkedOslcResource `xml:"linkedOslcResources,omitempty" json:"linkedOslcResources,omitempty"`

	Location *Location `xml:"location,omitempty" json:"location,omitempty"`

	ModuleAbsoluteLocation *Location `xml:"moduleAbsoluteLocation,omitempty" json:"moduleAbsoluteLocation,omitempty"`

	ModuleFolder string `xml:"moduleFolder,omitempty" json:"moduleFolder,omitempty"`

	ModuleLocation *Location `xml:"moduleLocation,omitempty" json:"moduleLocation,omitempty"`

	ModuleName string `xml:"moduleName,omitempty" json:"moduleName,omitempty"`

	Project *Project `xml:"project,omitempty" json:"project,omitempty"`

	Status *EnumOptionId `xml:"status,omitempty" json:"status,omitempty"`

	StructureLinkRole *EnumOptionId `xml:"structureLinkRole,omitempty" json:"structureLinkRole,omitempty"`

	Title string `xml:"title,omitempty" json:"title,omitempty"`

	Type_ *EnumOptionId `xml:"type,omitempty" json:"type,omitempty"`

	Updated soap.XSDDateTime `xml:"updated,omitempty" json:"updated,omitempty"`

	UpdatedBy *User `xml:"updatedBy,omitempty" json:"updatedBy,omitempty"`

	UsesOutlineNumbering bool `xml:"usesOutlineNumbering,omitempty" json:"usesOutlineNumbering,omitempty"`

	VariantURI *SubterraURI `xml:"variantURI,omitempty" json:"variantURI,omitempty"`

	CustomFields *ArrayOfCustom `xml:"customFields,omitempty" json:"customFields,omitempty"`

	Uri *SubterraURI `xml:"uri,attr,omitempty" json:"uri,omitempty"`

	Unresolvable bool `xml:"unresolvable,attr,omitempty" json:"unresolvable,omitempty"`
}

type EnumOption struct {
	Default_ bool `xml:"default,omitempty" json:"default,omitempty"`

	EnumId *string `xml:"enumId,omitempty" json:"enumId,omitempty"`

	Hidden bool `xml:"hidden,omitempty" json:"hidden,omitempty"`

	Id *string `xml:"id,omitempty" json:"id,omitempty"`

	Name *string `xml:"name,omitempty" json:"name,omitempty"`

	Phantom bool `xml:"phantom,omitempty" json:"phantom,omitempty"`

	Properties *Properties `xml:"properties,omitempty" json:"properties,omitempty"`

	SequenceNumber int32 `xml:"sequenceNumber,omitempty" json:"sequenceNumber,omitempty"`
}

type PriorityOptionId struct {
	*EnumOptionId
}

type ArrayOfPriorityOptionId struct {
	PriorityOptionId []*PriorityOptionId `xml:"PriorityOptionId,omitempty" json:"PriorityOptionId,omitempty"`
}

type PriorityOpt struct {
	*EnumOption

	Float float32 `xml:"float,omitempty" json:"float,omitempty"`
}

type EnumCustomFieldType struct {
	*CustomFieldType

	EnumId *string `xml:"enumId,omitempty" json:"enumId,omitempty"`
}

type Row struct {
	Values *ArrayOfText `xml:"values,omitempty" json:"values,omitempty"`
}

type ArrayOfRow struct {
	Row []*Row `xml:"Row,omitempty" json:"Row,omitempty"`
}

type Table struct {
	Keys *ArrayOfstring `xml:"keys,omitempty" json:"keys,omitempty"`

	Rows *ArrayOfRow `xml:"rows,omitempty" json:"rows,omitempty"`
}

type Parameter struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value AnyType `xml:"value,omitempty" json:"value,omitempty"`
}

type ArrayOfParameter struct {
	Parameter []*Parameter `xml:"Parameter,omitempty" json:"Parameter,omitempty"`
}

type TestStepResult struct {
	Attachments *ArrayOfTestRunAttachment `xml:"attachments,omitempty" json:"attachments,omitempty"`

	Comment *Text `xml:"comment,omitempty" json:"comment,omitempty"`

	Result *EnumOptionId `xml:"result,omitempty" json:"result,omitempty"`
}

type ArrayOfTestStepResult struct {
	TestStepResult []*TestStepResult `xml:"TestStepResult,omitempty" json:"TestStepResult,omitempty"`
}

type TestRecord struct {
	Attachments *ArrayOfTestRunAttachment `xml:"attachments,omitempty" json:"attachments,omitempty"`

	Comment *Text `xml:"comment,omitempty" json:"comment,omitempty"`

	DefectURI *SubterraURI `xml:"defectURI,omitempty" json:"defectURI,omitempty"`

	Duration float32 `xml:"duration,omitempty" json:"duration,omitempty"`

	Executed soap.XSDDateTime `xml:"executed,omitempty" json:"executed,omitempty"`

	ExecutedByURI *SubterraURI `xml:"executedByURI,omitempty" json:"executedByURI,omitempty"`

	Iteration int32 `xml:"iteration,omitempty" json:"iteration,omitempty"`

	Result *EnumOptionId `xml:"result,omitempty" json:"result,omitempty"`

	Signed bool `xml:"signed,omitempty" json:"signed,omitempty"`

	TestCaseURI *SubterraURI `xml:"testCaseURI,omitempty" json:"testCaseURI,omitempty"`

	TestCaseRevision string `xml:"testCaseRevision,omitempty" json:"testCaseRevision,omitempty"`

	TestParameters *ArrayOfParameter `xml:"testParameters,omitempty" json:"testParameters,omitempty"`

	TestStepResults *ArrayOfTestStepResult `xml:"testStepResults,omitempty" json:"testStepResults,omitempty"`
}

type ParameterDefinition struct {
	Name *string `xml:"name,omitempty" json:"name,omitempty"`
}

type ParametersLibrary struct {
	ParameterDefinitions *ArrayOf_tns3_ParameterDefinition `xml:"parameterDefinitions,omitempty" json:"parameterDefinitions,omitempty"`
}

type ArrayOfTestRecord struct {
	TestRecord []*TestRecord `xml:"TestRecord,omitempty" json:"TestRecord,omitempty"`
}

type ArrayOfParameterDefinition struct {
	ParameterDefinition []*ParameterDefinition `xml:"ParameterDefinition,omitempty" json:"ParameterDefinition,omitempty"`
}

type ParametersAndDefinitions struct {
	ParameterDefinitions *ArrayOfParameterDefinition `xml:"parameterDefinitions,omitempty" json:"parameterDefinitions,omitempty"`

	Parameters *ArrayOfParameter `xml:"parameters,omitempty" json:"parameters,omitempty"`
}

type TestRun struct {
	Attachments *ArrayOfTestRunAttachment `xml:"attachments,omitempty" json:"attachments,omitempty"`

	AuthorURI *SubterraURI `xml:"authorURI,omitempty" json:"authorURI,omitempty"`

	Comments *ArrayOfTestRunComment `xml:"comments,omitempty" json:"comments,omitempty"`

	Created soap.XSDDateTime `xml:"created,omitempty" json:"created,omitempty"`

	Document *Module `xml:"document,omitempty" json:"document,omitempty"`

	FinishedOn soap.XSDDateTime `xml:"finishedOn,omitempty" json:"finishedOn,omitempty"`

	GroupId string `xml:"groupId,omitempty" json:"groupId,omitempty"`

	HomePageContent *Text `xml:"homePageContent,omitempty" json:"homePageContent,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	IdPrefix string `xml:"idPrefix,omitempty" json:"idPrefix,omitempty"`

	IsTemplate bool `xml:"isTemplate,omitempty" json:"isTemplate,omitempty"`

	KeepInHistory bool `xml:"keepInHistory,omitempty" json:"keepInHistory,omitempty"`

	Location *Location `xml:"location,omitempty" json:"location,omitempty"`

	ProjectURI *SubterraURI `xml:"projectURI,omitempty" json:"projectURI,omitempty"`

	ProjectSpanURIs *ArrayOfSubterraURI `xml:"projectSpanURIs,omitempty" json:"projectSpanURIs,omitempty"`

	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Records *ArrayOfTestRecord `xml:"records,omitempty" json:"records,omitempty"`

	SelectTestCasesBy *EnumOptionId `xml:"selectTestCasesBy,omitempty" json:"selectTestCasesBy,omitempty"`

	Status *EnumOptionId `xml:"status,omitempty" json:"status,omitempty"`

	SummaryDefectURI *SubterraURI `xml:"summaryDefectURI,omitempty" json:"summaryDefectURI,omitempty"`

	TemplateURI *SubterraURI `xml:"templateURI,omitempty" json:"templateURI,omitempty"`

	TestParameters *ParametersAndDefinitions `xml:"testParameters,omitempty" json:"testParameters,omitempty"`

	Title string `xml:"title,omitempty" json:"title,omitempty"`

	Type_ *EnumOptionId `xml:"type,omitempty" json:"type,omitempty"`

	Updated soap.XSDDateTime `xml:"updated,omitempty" json:"updated,omitempty"`

	UseReportFromTemplate bool `xml:"useReportFromTemplate,omitempty" json:"useReportFromTemplate,omitempty"`

	CustomFields *ArrayOfCustom `xml:"customFields,omitempty" json:"customFields,omitempty"`

	Uri *SubterraURI `xml:"uri,attr,omitempty" json:"uri,omitempty"`

	Unresolvable bool `xml:"unresolvable,attr,omitempty" json:"unresolvable,omitempty"`
}

type TestStep struct {
	Values *ArrayOfText `xml:"values,omitempty" json:"values,omitempty"`
}

type ArrayOfTestStep struct {
	TestStep []*TestStep `xml:"TestStep,omitempty" json:"TestStep,omitempty"`
}

type TestSteps struct {
	Keys *ArrayOfEnumOptionId `xml:"keys,omitempty" json:"keys,omitempty"`

	Steps *ArrayOfTestStep `xml:"steps,omitempty" json:"steps,omitempty"`
}

type TestsConfiguration struct {
	DefectAutoAssignementEnabled bool `xml:"defectAutoAssignementEnabled,omitempty" json:"defectAutoAssignementEnabled,omitempty"`

	DefectReuseType *string `xml:"defectReuseType,omitempty" json:"defectReuseType,omitempty"`

	DefectTemplate *string `xml:"defectTemplate,omitempty" json:"defectTemplate,omitempty"`

	DefectToTestCaseLinkRoleId *string `xml:"defectToTestCaseLinkRoleId,omitempty" json:"defectToTestCaseLinkRoleId,omitempty"`

	DefectWorkItemType *string `xml:"defectWorkItemType,omitempty" json:"defectWorkItemType,omitempty"`

	DefectsProject *string `xml:"defectsProject,omitempty" json:"defectsProject,omitempty"`

	FieldsToCopyFromTestCaseToDefect *Properties `xml:"fieldsToCopyFromTestCaseToDefect,omitempty" json:"fieldsToCopyFromTestCaseToDefect,omitempty"`

	FieldsToCopyFromTestRunToLinkedDefect *Properties `xml:"fieldsToCopyFromTestRunToLinkedDefect,omitempty" json:"fieldsToCopyFromTestRunToLinkedDefect,omitempty"`

	FieldsToCopyFromTestRunToNewDefect *Properties `xml:"fieldsToCopyFromTestRunToNewDefect,omitempty" json:"fieldsToCopyFromTestRunToNewDefect,omitempty"`

	MaxCreatedDefects *int32 `xml:"maxCreatedDefects,omitempty" json:"maxCreatedDefects,omitempty"`

	MaxCreatedDefectsPercent *int32 `xml:"maxCreatedDefectsPercent,omitempty" json:"maxCreatedDefectsPercent,omitempty"`

	ResultErrorEnumId *string `xml:"resultErrorEnumId,omitempty" json:"resultErrorEnumId,omitempty"`

	ResultFailedEnumId *string `xml:"resultFailedEnumId,omitempty" json:"resultFailedEnumId,omitempty"`

	ResultPassedEnumId *string `xml:"resultPassedEnumId,omitempty" json:"resultPassedEnumId,omitempty"`

	RetestAllowed bool `xml:"retestAllowed,omitempty" json:"retestAllowed,omitempty"`

	StatusErrorEnumId *string `xml:"statusErrorEnumId,omitempty" json:"statusErrorEnumId,omitempty"`

	StatusFailedEnumId *string `xml:"statusFailedEnumId,omitempty" json:"statusFailedEnumId,omitempty"`

	StatusOkEnumId *string `xml:"statusOkEnumId,omitempty" json:"statusOkEnumId,omitempty"`

	SummaryDefectSeverity *string `xml:"summaryDefectSeverity,omitempty" json:"summaryDefectSeverity,omitempty"`

	TestCaseIdCustomField *string `xml:"testCaseIdCustomField,omitempty" json:"testCaseIdCustomField,omitempty"`

	TestCaseTemplate *string `xml:"testCaseTemplate,omitempty" json:"testCaseTemplate,omitempty"`

	TestCaseTestCommentFieldId *string `xml:"testCaseTestCommentFieldId,omitempty" json:"testCaseTestCommentFieldId,omitempty"`

	TestCaseTestResultFieldId *string `xml:"testCaseTestResultFieldId,omitempty" json:"testCaseTestResultFieldId,omitempty"`

	TestCaseWorkItemType *string `xml:"testCaseWorkItemType,omitempty" json:"testCaseWorkItemType,omitempty"`

	TestRunTemplate *string `xml:"testRunTemplate,omitempty" json:"testRunTemplate,omitempty"`

	TestRunsGeneratedIdEnabled bool `xml:"testRunsGeneratedIdEnabled,omitempty" json:"testRunsGeneratedIdEnabled,omitempty"`
}

type ArrayOf_tns3_ParameterDefinition struct {
	Item []*ParameterDefinition `xml:"item,omitempty" json:"item,omitempty"`
}

type TestManagementWebService interface {
	/*
		Adds a new Attachment to the specified Test Record.
		The created attachment can have a different file name than the one given.
		@param testRunUri The testRunUri URI of the Test Run that contains the target Test Record.
		@param index The index of the Test Record in the Test Run.
		@param fileName The Attachment's file name.
		@param title The Attachment's title.
		@param data The Attachment's data.
		@since 3.7.3    */
	AddAttachmentToTestRecord(request *AddAttachmentToTestRecord) (*AddAttachmentToTestRecordResponse, error)

	AddAttachmentToTestRecordContext(ctx context.Context, request *AddAttachmentToTestRecord) (*AddAttachmentToTestRecordResponse, error)

	/*
		Adds a new Attachment to the given Test Run or Test Run Template.
		@param testRunUri The URI of the target Test Run or Test Run Template.
		@param fileName The Attachment's file name.
		@param title The Attachment's title.
		@param data The Attachment's data.
		@since 3.7.1    */
	AddAttachmentToTestRun(request *AddAttachmentToTestRun) (*AddAttachmentToTestRunResponse, error)

	AddAttachmentToTestRunContext(ctx context.Context, request *AddAttachmentToTestRun) (*AddAttachmentToTestRunResponse, error)

	/*
		Adds a new Attachment to the specified Test Step.
		The created Attachment can have a different file name from the given one.
		@param testRunUri The testRunUri URI of the Test Run that contains the target Test Step.
		@param index The index of the Test Record in the Test Run that contains the target Test Step.
		@param testStepIndex The index of the Test Step in the Test Record.
		@param fileName The attachment's file name.
		@param title The attachment's title.
		@param data The attachment's data.
		@since 3.7.3    */
	AddAttachmentToTestStep(request *AddAttachmentToTestStep) (*AddAttachmentToTestStepResponse, error)

	AddAttachmentToTestStepContext(ctx context.Context, request *AddAttachmentToTestStep) (*AddAttachmentToTestStepResponse, error)

	/*
		Adds a specified Project to the Project Span of the Test Run.
		@param uri The URI of the Test Run. (Not null.)
		@param projectId The Project Id of the Project to be added. (Not null.)
		@since 3.10.1    */
	AddProjectToProjectSpan(request *AddProjectToProjectSpan) (*AddProjectToProjectSpanResponse, error)

	AddProjectToProjectSpanContext(ctx context.Context, request *AddProjectToProjectSpan) (*AddProjectToProjectSpanResponse, error)

	/*
		Add a Test Record to a Test Run.
		@param testRunUri The URI of the Test Run that the Test Record will be added to.
		@param testCaseUri The URI of the executed Test Case.
		@param testResultId The Id of the Test Result. Can be {@code null}.
		@param testComment The comment to be tracked with the Test Record. Can be {@code null}.
		@param executedByUri The URI of the user to be used as the Author of the Test Record. Can be {@code null}.
		@param executed date When the Test Case has been executed. Can be {@code null}.
		@param duration The time it takes to execute the Test Case. A negative value is treated as {@code null}.
		@param defectUri The URI of the Defect Work Item to be linked from created record. Can be {@code null}.
		@since 3.6.0    */
	AddTestRecord(request *AddTestRecord) (*AddTestRecordResponse, error)

	AddTestRecordContext(ctx context.Context, request *AddTestRecord) (*AddTestRecordResponse, error)

	/*
		Adds the Test Record to the Test Run. If the Test Record to add
		has a result but does not have the Test Case revision filled in, the added Test Record will automatically
		set the Test Case revision to the current revision of the Test Case.
		@param testRunUri The URI of the target Test Run.
		@param testRecord The Test Record to add.
		@since 3.7.0    */
	AddTestRecordToTestRun(request *AddTestRecordToTestRun) (*AddTestRecordToTestRunResponse, error)

	AddTestRecordToTestRunContext(ctx context.Context, request *AddTestRecordToTestRun) (*AddTestRecordToTestRunResponse, error)

	/*
		Create or return an existing Summary Defect Work Item of a Test Run.
		@param testRunUri The URI of the Test Run to update the summary defect for.
		@param defectTemplateUri The URI of the Defect Work Item template to be used.  The configured template will be used if {@code null}.
		@return The URI of the created or existing Summary Defect Work Item.
		@since 3.6.0    */
	CreateSummaryDefect(request *CreateSummaryDefect) (*CreateSummaryDefectResponse, error)

	CreateSummaryDefectContext(ctx context.Context, request *CreateSummaryDefect) (*CreateSummaryDefectResponse, error)

	/*
		Create a new Test Run.
		@param project The Project the Test Run will be created in.
		@param id The Id of the Test Run to be created.
		@param template The template used to create the Test Run.
		@return The URI of the created Test Run.
		@since 3.6.0    */
	CreateTestRun(request *CreateTestRun) (*CreateTestRunResponse, error)

	CreateTestRunContext(ctx context.Context, request *CreateTestRun) (*CreateTestRunResponse, error)

	/*
		Create a new Test Run.
		@param project The Project the Test Run will be created in.
		@param id The Id of the Test Run to be created in.
		@param title The title of the Test Run to be created. The template title is used when null.
		@param template The template used to create the Test Run.
		@return The URI of the created Test Run.
		@since 3.10.1    */
	CreateTestRunWithTitle(request *CreateTestRunWithTitle) (*CreateTestRunWithTitleResponse, error)

	CreateTestRunWithTitleContext(ctx context.Context, request *CreateTestRunWithTitle) (*CreateTestRunWithTitleResponse, error)

	/*
		Deletes the Test Record Attachment given by the Test Run, the index of the Test Record and the Attachment's file name.
		@param testRunUri The testRunUri URI of the Test Run that contains the target Test Record.
		@param index The index of the Test Record in the Test Run.
		@param fileName The Attachment's file name.
		@since 3.7.3    */
	DeleteAttachmentFromTestRecord(request *DeleteAttachmentFromTestRecord) (*DeleteAttachmentFromTestRecordResponse, error)

	DeleteAttachmentFromTestRecordContext(ctx context.Context, request *DeleteAttachmentFromTestRecord) (*DeleteAttachmentFromTestRecordResponse, error)

	/*
		Deletes the Test Step Attachment given by the Test Run, the index of Test Records, the index of Test Steps and the Attachment's file name.
		@param testRunUri The testRunUri URI of the Test Run that contains the target Test Record.
		@param index The index of the Test Record in the Test Run.
		@param testStepIndex The index of the Test Step in the Test Record.
		@param fileName The attachment's file name.
		@since 3.7.3    */
	DeleteAttachmentFromTestStep(request *DeleteAttachmentFromTestStep) (*DeleteAttachmentFromTestStepResponse, error)

	DeleteAttachmentFromTestStepContext(ctx context.Context, request *DeleteAttachmentFromTestStep) (*DeleteAttachmentFromTestStepResponse, error)

	/*
		Deletes the Test Run Attachment matching the Test Run and Attachment's file name.
		This Method is applicable for Test Run Templates.
		@param testRunUri The URI of the Test Run or Test Run Template containing the target Attachment. (Not null.)
		@param fileName The file name of Attachment to delete.
		@since 3.7.1    */
	DeleteTestRunAttachment(request *DeleteTestRunAttachment) (*DeleteTestRunAttachmentResponse, error)

	DeleteTestRunAttachmentContext(ctx context.Context, request *DeleteTestRunAttachment) (*DeleteTestRunAttachmentResponse, error)

	/*
		Executes Test Cases given by the Test Records within a specified Test Run. This method differs from others within this web service because it can execute multiple Test Cases in a single call.
		It can also create a defect if a Test Case fails. (If configured to do so on the Polarion server.)
		It replaces having to call multiple web services like addTestRecord(...) or updateTestRecord(...) and the manual creation of a defect.
		Test parameters in the supplied Test Records override any parameters contained within the original planned test records and the Test Run itself.
		If a required parameter is supplied with an empty value, the Method will fail.
		It is not necessary to fill in all the parameters, only those that do not have a value set in the Test Run or planned Test Case,
		or those that should be changed.
		@param testRunUri The URI of the Test Run. (Not null.)
		@param testRecords An array containing Test Records for executed Test Cases. Submitted Test Records are automatically updated. For example, when a Test Case is planned, paused or created. (Not null.)
		@since 3.10.3    */
	ExecuteTest(request *ExecuteTest) (*ExecuteTestResponse, error)

	ExecuteTestContext(ctx context.Context, request *ExecuteTest) (*ExecuteTestResponse, error)

	/*
		Gets all custom field keys defined for a Test Run.
		@param projectID The Id of the Project. (If null, the Global context is used.)
		@since 3.10.3    */
	GetDefinedTestRunCustomFieldKeys(request *GetDefinedTestRunCustomFieldKeys) (*GetDefinedTestRunCustomFieldKeysResponse, error)

	GetDefinedTestRunCustomFieldKeysContext(ctx context.Context, request *GetDefinedTestRunCustomFieldKeys) (*GetDefinedTestRunCustomFieldKeysResponse, error)

	/*
		Gets a custom field definition for a Test Run.
		@param projectID The ID of the Project. (If null, the Global context is used.)
		@param key The custom field's key. (Not null.)
		@since 3.10.3    */
	GetDefinedTestRunCustomFieldType(request *GetDefinedTestRunCustomFieldType) (*GetDefinedTestRunCustomFieldTypeResponse, error)

	GetDefinedTestRunCustomFieldTypeContext(ctx context.Context, request *GetDefinedTestRunCustomFieldType) (*GetDefinedTestRunCustomFieldTypeResponse, error)

	/*
		Gets all custom field definitions for a Test Run.
		@param projectID The Id of the Project. (If null, the Global context is used.)
		@since 3.10.3    */
	GetDefinedTestRunCustomFieldTypes(request *GetDefinedTestRunCustomFieldTypes) (*GetDefinedTestRunCustomFieldTypesResponse, error)

	GetDefinedTestRunCustomFieldTypesContext(ctx context.Context, request *GetDefinedTestRunCustomFieldTypes) (*GetDefinedTestRunCustomFieldTypesResponse, error)

	/*
		Returns an array of test parameter names used in the Test Case.
		@param testCaseUri The URI of the Test Case. (Not null).
		@since 3.17.0    */
	GetTestCaseParameterNames(request *GetTestCaseParameterNames) (*GetTestCaseParameterNamesResponse, error)

	GetTestCaseParameterNamesContext(ctx context.Context, request *GetTestCaseParameterNames) (*GetTestCaseParameterNamesResponse, error)

	/*
		Returns the Test Records of a particular Test Case in a Test Run.
		@param testRunUri The URI of the Test Run. (Not null).
		@param testCaseUri The URI of the Test Case (Mot null).
		@since 3.17.0    */
	GetTestCaseRecords(request *GetTestCaseRecords) (*GetTestCaseRecordsResponse, error)

	GetTestCaseRecordsContext(ctx context.Context, request *GetTestCaseRecords) (*GetTestCaseRecordsResponse, error)

	/*
		Returns the Project level test parameter library.
		@param projectId The Id of the Project to get the test parameter library for. (Not null.)
		@since 3.17.0    */
	GetTestParametersLibrary(request *GetTestParametersLibrary) (*GetTestParametersLibraryResponse, error)

	GetTestParametersLibraryContext(ctx context.Context, request *GetTestParametersLibrary) (*GetTestParametersLibraryResponse, error)

	/*
		Returns an Attachment of a given Test Run or Test Run Template.
		@param testRunUri The URI of the target Test Run or Test Run Template.
		@return the attachment
		@since 3.7.1    */
	GetTestRunAttachment(request *GetTestRunAttachment) (*GetTestRunAttachmentResponse, error)

	GetTestRunAttachmentContext(ctx context.Context, request *GetTestRunAttachment) (*GetTestRunAttachmentResponse, error)

	/*
		Returns the Attachments of a given Test Run or Test Run Template.
		@param testRunUri The URI of the target Test Run or Test Run Template.
		@return attachments
		@since 3.7.1    */
	GetTestRunAttachments(request *GetTestRunAttachments) (*GetTestRunAttachmentsResponse, error)

	GetTestRunAttachmentsContext(ctx context.Context, request *GetTestRunAttachments) (*GetTestRunAttachmentsResponse, error)

	/*
		Returns a specific Test Run.
		@param project The Id of the Project that contains the Test Run to load.
		@param id The Id of the Test Run to load.
		@return the Test Run.
		@since 3.6.0    */
	GetTestRunById(request *GetTestRunById) (*GetTestRunByIdResponse, error)

	GetTestRunByIdContext(ctx context.Context, request *GetTestRunById) (*GetTestRunByIdResponse, error)

	/*
		Returns a specific Test Run that only contains values for the specified list of fields.
		@param project The Id of the Project that contains the Test Run to load. (Not null.)
		@param id The Id of the Test Run to load. (Not null.)
		@param keys The keys of Test Run properties that should be copied from the Test Run. (Not null.)
		@return The Test Run. (Not null.)
		@since 3.17.0    */
	GetTestRunByIdWithFields(request *GetTestRunByIdWithFields) (*GetTestRunByIdWithFieldsResponse, error)

	GetTestRunByIdWithFieldsContext(ctx context.Context, request *GetTestRunByIdWithFields) (*GetTestRunByIdWithFieldsResponse, error)

	/*
		Returns a specific Test Run.
		@param uri The URI of the Test Run to load.
		@return The Test Run.
		@since 3.6.0    */
	GetTestRunByUri(request *GetTestRunByUri) (*GetTestRunByUriResponse, error)

	GetTestRunByUriContext(ctx context.Context, request *GetTestRunByUri) (*GetTestRunByUriResponse, error)

	/*
		Returns a specific Test Run that only contains values for the specified list of fields.
		@param uri The URI of the Test Run to load. (Not null.)
		@param keys The keys of the Test Run properties that should be copied from the Test Run. (Not null.)
		@return the Test Run. (not null)
		@since 3.17.0    */
	GetTestRunByUriWithFields(request *GetTestRunByUriWithFields) (*GetTestRunByUriWithFieldsResponse, error)

	GetTestRunByUriWithFieldsContext(ctx context.Context, request *GetTestRunByUriWithFields) (*GetTestRunByUriWithFieldsResponse, error)

	/*
		Gets the custom field definitions for a specific Test Run.
		@param testRunURI The URI of the Test Run. (Not null.)
		@param key The custom field's key. (Not null.)
		@since 3.10.3    */
	GetTestRunCustomFieldType(request *GetTestRunCustomFieldType) (*GetTestRunCustomFieldTypeResponse, error)

	GetTestRunCustomFieldTypeContext(ctx context.Context, request *GetTestRunCustomFieldType) (*GetTestRunCustomFieldTypeResponse, error)

	/*
		Gets all custom field definitions for a specific Test Run.
		@param testRunURI The URI of the Test Run. (Not null.)
		@since 3.10.3    */
	GetTestRunCustomFieldTypes(request *GetTestRunCustomFieldTypes) (*GetTestRunCustomFieldTypesResponse, error)

	GetTestRunCustomFieldTypesContext(ctx context.Context, request *GetTestRunCustomFieldTypes) (*GetTestRunCustomFieldTypesResponse, error)

	/*
		Gets the Test Steps of the Work Item with the URI.
		@param uri The URI of the Work Item to get.
		@return The Test Steps of the Work Item with the given URI.
		@since 3.7.0    */
	GetTestSteps(request *GetTestSteps) (*GetTestStepsResponse, error)

	GetTestStepsContext(ctx context.Context, request *GetTestSteps) (*GetTestStepsResponse, error)

	/*
		Gets the Test Steps custom field configuration.
		@param projectId The Id of the Project containing the Test Step configuration.
		@return An EnumOption array containing the configuration for each Test Step column.
		@since 3.7.0    */
	GetTestStepsConfiguration(request *GetTestStepsConfiguration) (*GetTestStepsConfigurationResponse, error)

	GetTestStepsConfigurationContext(ctx context.Context, request *GetTestStepsConfiguration) (*GetTestStepsConfigurationResponse, error)

	/*
		Get the test management configuration for a specific Project.
		@param projectId The Id of the Project to get the test configuration for.
		@return The configuration.
		@since 3.6.0    */
	GetTestsConfiguration(request *GetTestsConfiguration) (*GetTestsConfigurationResponse, error)

	GetTestsConfigurationContext(ctx context.Context, request *GetTestsConfiguration) (*GetTestsConfigurationResponse, error)

	/*
		Returns the Wiki Page content of Test Run or Test Run Template.
		@param testRunUri The URI of the target Test Run or Test Run Template.
		@return The Wiki Page content of Test Run or Test Run Template.
		@since 3.7.1    */
	GetWikiContentForTestRun(request *GetWikiContentForTestRun) (*GetWikiContentForTestRunResponse, error)

	GetWikiContentForTestRunContext(ctx context.Context, request *GetWikiContentForTestRun) (*GetWikiContentForTestRunResponse, error)

	/*
		Removes the specified Project from the Project Span of the Test Run.
		@param uri The URI of the Test Run. (Not null.)
		@param projectId The Project Id of the Project to be removed. (Not null).
		@since 3.10.1    */
	RemoveProjectFromProjectSpan(request *RemoveProjectFromProjectSpan) (*RemoveProjectFromProjectSpanResponse, error)

	RemoveProjectFromProjectSpanContext(ctx context.Context, request *RemoveProjectFromProjectSpan) (*RemoveProjectFromProjectSpanResponse, error)

	/*
		Search for Test Records.
		@param query The query used to find Test Records.
		@param sort The sort field.
		@param limit The maximum number of records to be returned. (-1 for unlimited.)
		@return the found test records.
		@since 3.6.0
		@deprecated since 3.8.1 with no direct replacement.    */
	SearchTestRecords(request *SearchTestRecords) (*SearchTestRecordsResponse, error)

	SearchTestRecordsContext(ctx context.Context, request *SearchTestRecords) (*SearchTestRecordsResponse, error)

	/*
		Search Test Run templates.
		@param query The query used to find test run templates.
		@param sort The field used to sort the result.
		@return The found Test Run templates.
		@since 3.6.0    */
	SearchTestRunTemplates(request *SearchTestRunTemplates) (*SearchTestRunTemplatesResponse, error)

	SearchTestRunTemplatesContext(ctx context.Context, request *SearchTestRunTemplates) (*SearchTestRunTemplatesResponse, error)

	/*
		Search Test Run templates.
		@param query The query used to find Test Run templates.
		@param sort The field used to sort the result.
		@param resultsLimit The maximum number of records to be returned. (-1 for unlimited.)
		@return The found Test Run templates.
		@since 3.6.0    */
	SearchTestRunTemplatesLimited(request *SearchTestRunTemplatesLimited) (*SearchTestRunTemplatesLimitedResponse, error)

	SearchTestRunTemplatesLimitedContext(ctx context.Context, request *SearchTestRunTemplatesLimited) (*SearchTestRunTemplatesLimitedResponse, error)

	/*
		Search Test Run templates.
		@param query The query used to find Test Run templates.
		@param sort The field used to sort the result.
		@param fields The Test Run fields that should be initialized. All other fields will be {@code null}.
		@return The found Test Run templates.
		@since 3.6.0    */
	SearchTestRunTemplatesWithFields(request *SearchTestRunTemplatesWithFields) (*SearchTestRunTemplatesWithFieldsResponse, error)

	SearchTestRunTemplatesWithFieldsContext(ctx context.Context, request *SearchTestRunTemplatesWithFields) (*SearchTestRunTemplatesWithFieldsResponse, error)

	/*
		Search Test Run templates.
		@param query The query used to find Test Run templates.
		@param sort The field used to sort the result.
		@param fields The Test Run fields that should be initialized. All other fields will be {@code null}.
		@param resultsLimit The maximum number of records to be returned. (-1 for unlimited.)
		@return The found Test Run templates.
		@since 3.6.0    */
	SearchTestRunTemplatesWithFieldsLimited(request *SearchTestRunTemplatesWithFieldsLimited) (*SearchTestRunTemplatesWithFieldsLimitedResponse, error)

	SearchTestRunTemplatesWithFieldsLimitedContext(ctx context.Context, request *SearchTestRunTemplatesWithFieldsLimited) (*SearchTestRunTemplatesWithFieldsLimitedResponse, error)

	/*
		Search Test Runs.
		@param query The query used to find Test Runs.
		@param sort The field used to sort the result.
		@return The found Test Runs.
		@since 3.6.0    */
	SearchTestRuns(request *SearchTestRuns) (*SearchTestRunsResponse, error)

	SearchTestRunsContext(ctx context.Context, request *SearchTestRuns) (*SearchTestRunsResponse, error)

	/*
		Search test runs.
		@param query The query used to find Test Runs.
		@param sort The field used to sort the result.
		@param resultsLimit The maximum number of records to be returned. (-1 for unlimited.)
		@return The found test runs.
		@since 3.6.0    */
	SearchTestRunsLimited(request *SearchTestRunsLimited) (*SearchTestRunsLimitedResponse, error)

	SearchTestRunsLimitedContext(ctx context.Context, request *SearchTestRunsLimited) (*SearchTestRunsLimitedResponse, error)

	/*
		Search Test Runs.
		@param query The query used to find Test Runs.
		@param sort The field used to sort the result.
		@param fields The Test Run fields that should be initialized. All other fields will be {@code null}.
		@return The found Test Runs.
		@since 3.6.0    */
	SearchTestRunsWithFields(request *SearchTestRunsWithFields) (*SearchTestRunsWithFieldsResponse, error)

	SearchTestRunsWithFieldsContext(ctx context.Context, request *SearchTestRunsWithFields) (*SearchTestRunsWithFieldsResponse, error)

	/*
		Search Test Runs.
		@param query The query used to find Test Runs.
		@param sort The field used to sort the result.
		@param fields The Test Run fields that should be initialized. All other fields will be {@code null}.
		@param resultsLimit The maximum number of records to be returned. (-1 for unlimited.)
		@return The found Test Runs.
		@since 3.6.0    */
	SearchTestRunsWithFieldsLimited(request *SearchTestRunsWithFieldsLimited) (*SearchTestRunsWithFieldsLimitedResponse, error)

	SearchTestRunsWithFieldsLimitedContext(ctx context.Context, request *SearchTestRunsWithFieldsLimited) (*SearchTestRunsWithFieldsLimitedResponse, error)

	/*
		Adds the Test Steps to the Work Item with the given URI. (The add operation).
		If the Work Item already has Test Steps, they will be completely replaced. (The update operation).
		If the testSteps parameter is {@code null}, the content of the Test Steps field will be emptied. (The delete operation).
		@param workItemURI The SubterraURI of the item to set the Work Item.
		@param testSteps An array containing an entry for each step.
		@since 3.7.0    */
	SetTestSteps(request *SetTestSteps) (*SetTestStepsResponse, error)

	SetTestStepsContext(ctx context.Context, request *SetTestSteps) (*SetTestStepsResponse, error)

	/*
		Create or update the Summary Defect Work Item of a Test Run.
		@param testRunUri The URI of the Test Run to update the Summary Defect for.
		@param source The source of the Summary Defect, used to generate the Description content.
		@param totalFailures The amount of total failures in the Test Run. (Used to generate the Description content.)
		@param totalErrors The total number of errors in the Test Run. (Used to generate the Description content.)
		@param totalTests The total number of tests in the Test Run. (Used to generate the Description content.)
		@param defectTemplateUri The URI of the Defect Work Item template to be used. The configured template will be used if {@code null}.
		@return The URI of the created Summary Defect Work Item.
		@since 3.6.0    */
	UpdateSummaryDefect(request *UpdateSummaryDefect) (*UpdateSummaryDefectResponse, error)

	UpdateSummaryDefectContext(ctx context.Context, request *UpdateSummaryDefect) (*UpdateSummaryDefectResponse, error)

	/*
		Update a Test Record.
		@param testRunUri The URI of the Test Run that the Test Record will be updated for.
		@param index The index of the Test Record in the list of all executed Test Run Test Records.
		@param testResultId The Id of the test result. Can be {@code null}.
		@param testComment The comment to be tracked with the Test Record. Can be {@code null}.
		@param executedByUri The URI of the user to be used as the Author of the Test Record. Can be {@code null}.
		@param executed date When the Test Case was executed. Can be {@code null}.
		@param duration The time it takes to execute the Test Case. A negative value is treated as {@code null}.
		@param defectUri The URI of the Defect Work Item to be linked from the created record. Can be {@code null}.
		@since 3.6.0    */
	UpdateTestRecord(request *UpdateTestRecord) (*UpdateTestRecordResponse, error)

	UpdateTestRecordContext(ctx context.Context, request *UpdateTestRecord) (*UpdateTestRecordResponse, error)

	/*
		Updates or removes the Test Record at a given index in the Test Run.
		Test parameters should not be entered in the supplied Test Record
		because they are ignored by this method. (This may change in the future.)
		@param testRunUri The URI of the target Test Run. (Not null).
		@param index The index of the Test Record in the list of all Test Run Test Records.
		@param testRecord The new Test Record content, or null to remove the Test Record.
		@since 3.7.0    */
	UpdateTestRecordAtIndex(request *UpdateTestRecordAtIndex) (*UpdateTestRecordAtIndexResponse, error)

	UpdateTestRecordAtIndexContext(ctx context.Context, request *UpdateTestRecordAtIndex) (*UpdateTestRecordAtIndexResponse, error)

	/*
		Update a Test Run.
		@param content The new Test Run content. The URI of the content must be set, otherwise the call will fail.
		@since 3.6.0    */
	UpdateTestRun(request *UpdateTestRun) (*UpdateTestRunResponse, error)

	UpdateTestRunContext(ctx context.Context, request *UpdateTestRun) (*UpdateTestRunResponse, error)

	/*
		Updates the Test Run Attachment matching the Test Run and Attachment's file name.
		This Method is applicable for Test Run Templates.
		@param testRunUri The URI of the Test Run or Test Run Template containing the target Attachment.
		@param fileName The file name of the Attachment to update.
		@param title The new attachment's title. (If null, the attachment's title is not updated.)
		@param data The new attachment's data. (If null, the attachment's data is not updated.)
		@since 3.7.1    */
	UpdateTestRunAttachment(request *UpdateTestRunAttachment) (*UpdateTestRunAttachmentResponse, error)

	UpdateTestRunAttachmentContext(ctx context.Context, request *UpdateTestRunAttachment) (*UpdateTestRunAttachmentResponse, error)

	/*
		Updates the Wiki Page content of a given Test Run or Test Run Template.
		@param testRunUri The URI of the Test Run or Test Run Template.
		@param content The new Wiki Page content of the Test Run or Test Run Template.
		@since 3.7.1    */
	UpdateWikiContentForTestRun(request *UpdateWikiContentForTestRun) (*UpdateWikiContentForTestRunResponse, error)

	UpdateWikiContentForTestRunContext(ctx context.Context, request *UpdateWikiContentForTestRun) (*UpdateWikiContentForTestRunResponse, error)
}

type testManagementWebService struct {
	client *soap.Client
}

func NewTestManagementWebService(client *soap.Client) TestManagementWebService {
	return &testManagementWebService{
		client: client,
	}
}

func (service *testManagementWebService) AddAttachmentToTestRecordContext(ctx context.Context, request *AddAttachmentToTestRecord) (*AddAttachmentToTestRecordResponse, error) {
	response := new(AddAttachmentToTestRecordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) AddAttachmentToTestRecord(request *AddAttachmentToTestRecord) (*AddAttachmentToTestRecordResponse, error) {
	return service.AddAttachmentToTestRecordContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) AddAttachmentToTestRunContext(ctx context.Context, request *AddAttachmentToTestRun) (*AddAttachmentToTestRunResponse, error) {
	response := new(AddAttachmentToTestRunResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) AddAttachmentToTestRun(request *AddAttachmentToTestRun) (*AddAttachmentToTestRunResponse, error) {
	return service.AddAttachmentToTestRunContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) AddAttachmentToTestStepContext(ctx context.Context, request *AddAttachmentToTestStep) (*AddAttachmentToTestStepResponse, error) {
	response := new(AddAttachmentToTestStepResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) AddAttachmentToTestStep(request *AddAttachmentToTestStep) (*AddAttachmentToTestStepResponse, error) {
	return service.AddAttachmentToTestStepContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) AddProjectToProjectSpanContext(ctx context.Context, request *AddProjectToProjectSpan) (*AddProjectToProjectSpanResponse, error) {
	response := new(AddProjectToProjectSpanResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) AddProjectToProjectSpan(request *AddProjectToProjectSpan) (*AddProjectToProjectSpanResponse, error) {
	return service.AddProjectToProjectSpanContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) AddTestRecordContext(ctx context.Context, request *AddTestRecord) (*AddTestRecordResponse, error) {
	response := new(AddTestRecordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) AddTestRecord(request *AddTestRecord) (*AddTestRecordResponse, error) {
	return service.AddTestRecordContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) AddTestRecordToTestRunContext(ctx context.Context, request *AddTestRecordToTestRun) (*AddTestRecordToTestRunResponse, error) {
	response := new(AddTestRecordToTestRunResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) AddTestRecordToTestRun(request *AddTestRecordToTestRun) (*AddTestRecordToTestRunResponse, error) {
	return service.AddTestRecordToTestRunContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) CreateSummaryDefectContext(ctx context.Context, request *CreateSummaryDefect) (*CreateSummaryDefectResponse, error) {
	response := new(CreateSummaryDefectResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) CreateSummaryDefect(request *CreateSummaryDefect) (*CreateSummaryDefectResponse, error) {
	return service.CreateSummaryDefectContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) CreateTestRunContext(ctx context.Context, request *CreateTestRun) (*CreateTestRunResponse, error) {
	response := new(CreateTestRunResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) CreateTestRun(request *CreateTestRun) (*CreateTestRunResponse, error) {
	return service.CreateTestRunContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) CreateTestRunWithTitleContext(ctx context.Context, request *CreateTestRunWithTitle) (*CreateTestRunWithTitleResponse, error) {
	response := new(CreateTestRunWithTitleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) CreateTestRunWithTitle(request *CreateTestRunWithTitle) (*CreateTestRunWithTitleResponse, error) {
	return service.CreateTestRunWithTitleContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) DeleteAttachmentFromTestRecordContext(ctx context.Context, request *DeleteAttachmentFromTestRecord) (*DeleteAttachmentFromTestRecordResponse, error) {
	response := new(DeleteAttachmentFromTestRecordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) DeleteAttachmentFromTestRecord(request *DeleteAttachmentFromTestRecord) (*DeleteAttachmentFromTestRecordResponse, error) {
	return service.DeleteAttachmentFromTestRecordContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) DeleteAttachmentFromTestStepContext(ctx context.Context, request *DeleteAttachmentFromTestStep) (*DeleteAttachmentFromTestStepResponse, error) {
	response := new(DeleteAttachmentFromTestStepResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) DeleteAttachmentFromTestStep(request *DeleteAttachmentFromTestStep) (*DeleteAttachmentFromTestStepResponse, error) {
	return service.DeleteAttachmentFromTestStepContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) DeleteTestRunAttachmentContext(ctx context.Context, request *DeleteTestRunAttachment) (*DeleteTestRunAttachmentResponse, error) {
	response := new(DeleteTestRunAttachmentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) DeleteTestRunAttachment(request *DeleteTestRunAttachment) (*DeleteTestRunAttachmentResponse, error) {
	return service.DeleteTestRunAttachmentContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) ExecuteTestContext(ctx context.Context, request *ExecuteTest) (*ExecuteTestResponse, error) {
	response := new(ExecuteTestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) ExecuteTest(request *ExecuteTest) (*ExecuteTestResponse, error) {
	return service.ExecuteTestContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetDefinedTestRunCustomFieldKeysContext(ctx context.Context, request *GetDefinedTestRunCustomFieldKeys) (*GetDefinedTestRunCustomFieldKeysResponse, error) {
	response := new(GetDefinedTestRunCustomFieldKeysResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetDefinedTestRunCustomFieldKeys(request *GetDefinedTestRunCustomFieldKeys) (*GetDefinedTestRunCustomFieldKeysResponse, error) {
	return service.GetDefinedTestRunCustomFieldKeysContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetDefinedTestRunCustomFieldTypeContext(ctx context.Context, request *GetDefinedTestRunCustomFieldType) (*GetDefinedTestRunCustomFieldTypeResponse, error) {
	response := new(GetDefinedTestRunCustomFieldTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetDefinedTestRunCustomFieldType(request *GetDefinedTestRunCustomFieldType) (*GetDefinedTestRunCustomFieldTypeResponse, error) {
	return service.GetDefinedTestRunCustomFieldTypeContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetDefinedTestRunCustomFieldTypesContext(ctx context.Context, request *GetDefinedTestRunCustomFieldTypes) (*GetDefinedTestRunCustomFieldTypesResponse, error) {
	response := new(GetDefinedTestRunCustomFieldTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetDefinedTestRunCustomFieldTypes(request *GetDefinedTestRunCustomFieldTypes) (*GetDefinedTestRunCustomFieldTypesResponse, error) {
	return service.GetDefinedTestRunCustomFieldTypesContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestCaseParameterNamesContext(ctx context.Context, request *GetTestCaseParameterNames) (*GetTestCaseParameterNamesResponse, error) {
	response := new(GetTestCaseParameterNamesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestCaseParameterNames(request *GetTestCaseParameterNames) (*GetTestCaseParameterNamesResponse, error) {
	return service.GetTestCaseParameterNamesContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestCaseRecordsContext(ctx context.Context, request *GetTestCaseRecords) (*GetTestCaseRecordsResponse, error) {
	response := new(GetTestCaseRecordsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestCaseRecords(request *GetTestCaseRecords) (*GetTestCaseRecordsResponse, error) {
	return service.GetTestCaseRecordsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestParametersLibraryContext(ctx context.Context, request *GetTestParametersLibrary) (*GetTestParametersLibraryResponse, error) {
	response := new(GetTestParametersLibraryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestParametersLibrary(request *GetTestParametersLibrary) (*GetTestParametersLibraryResponse, error) {
	return service.GetTestParametersLibraryContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestRunAttachmentContext(ctx context.Context, request *GetTestRunAttachment) (*GetTestRunAttachmentResponse, error) {
	response := new(GetTestRunAttachmentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestRunAttachment(request *GetTestRunAttachment) (*GetTestRunAttachmentResponse, error) {
	return service.GetTestRunAttachmentContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestRunAttachmentsContext(ctx context.Context, request *GetTestRunAttachments) (*GetTestRunAttachmentsResponse, error) {
	response := new(GetTestRunAttachmentsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestRunAttachments(request *GetTestRunAttachments) (*GetTestRunAttachmentsResponse, error) {
	return service.GetTestRunAttachmentsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestRunByIdContext(ctx context.Context, request *GetTestRunById) (*GetTestRunByIdResponse, error) {
	response := new(GetTestRunByIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestRunById(request *GetTestRunById) (*GetTestRunByIdResponse, error) {
	return service.GetTestRunByIdContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestRunByIdWithFieldsContext(ctx context.Context, request *GetTestRunByIdWithFields) (*GetTestRunByIdWithFieldsResponse, error) {
	response := new(GetTestRunByIdWithFieldsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestRunByIdWithFields(request *GetTestRunByIdWithFields) (*GetTestRunByIdWithFieldsResponse, error) {
	return service.GetTestRunByIdWithFieldsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestRunByUriContext(ctx context.Context, request *GetTestRunByUri) (*GetTestRunByUriResponse, error) {
	response := new(GetTestRunByUriResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestRunByUri(request *GetTestRunByUri) (*GetTestRunByUriResponse, error) {
	return service.GetTestRunByUriContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestRunByUriWithFieldsContext(ctx context.Context, request *GetTestRunByUriWithFields) (*GetTestRunByUriWithFieldsResponse, error) {
	response := new(GetTestRunByUriWithFieldsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestRunByUriWithFields(request *GetTestRunByUriWithFields) (*GetTestRunByUriWithFieldsResponse, error) {
	return service.GetTestRunByUriWithFieldsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestRunCustomFieldTypeContext(ctx context.Context, request *GetTestRunCustomFieldType) (*GetTestRunCustomFieldTypeResponse, error) {
	response := new(GetTestRunCustomFieldTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestRunCustomFieldType(request *GetTestRunCustomFieldType) (*GetTestRunCustomFieldTypeResponse, error) {
	return service.GetTestRunCustomFieldTypeContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestRunCustomFieldTypesContext(ctx context.Context, request *GetTestRunCustomFieldTypes) (*GetTestRunCustomFieldTypesResponse, error) {
	response := new(GetTestRunCustomFieldTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestRunCustomFieldTypes(request *GetTestRunCustomFieldTypes) (*GetTestRunCustomFieldTypesResponse, error) {
	return service.GetTestRunCustomFieldTypesContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestStepsContext(ctx context.Context, request *GetTestSteps) (*GetTestStepsResponse, error) {
	response := new(GetTestStepsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestSteps(request *GetTestSteps) (*GetTestStepsResponse, error) {
	return service.GetTestStepsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestStepsConfigurationContext(ctx context.Context, request *GetTestStepsConfiguration) (*GetTestStepsConfigurationResponse, error) {
	response := new(GetTestStepsConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestStepsConfiguration(request *GetTestStepsConfiguration) (*GetTestStepsConfigurationResponse, error) {
	return service.GetTestStepsConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetTestsConfigurationContext(ctx context.Context, request *GetTestsConfiguration) (*GetTestsConfigurationResponse, error) {
	response := new(GetTestsConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetTestsConfiguration(request *GetTestsConfiguration) (*GetTestsConfigurationResponse, error) {
	return service.GetTestsConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) GetWikiContentForTestRunContext(ctx context.Context, request *GetWikiContentForTestRun) (*GetWikiContentForTestRunResponse, error) {
	response := new(GetWikiContentForTestRunResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) GetWikiContentForTestRun(request *GetWikiContentForTestRun) (*GetWikiContentForTestRunResponse, error) {
	return service.GetWikiContentForTestRunContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) RemoveProjectFromProjectSpanContext(ctx context.Context, request *RemoveProjectFromProjectSpan) (*RemoveProjectFromProjectSpanResponse, error) {
	response := new(RemoveProjectFromProjectSpanResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) RemoveProjectFromProjectSpan(request *RemoveProjectFromProjectSpan) (*RemoveProjectFromProjectSpanResponse, error) {
	return service.RemoveProjectFromProjectSpanContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SearchTestRecordsContext(ctx context.Context, request *SearchTestRecords) (*SearchTestRecordsResponse, error) {
	response := new(SearchTestRecordsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SearchTestRecords(request *SearchTestRecords) (*SearchTestRecordsResponse, error) {
	return service.SearchTestRecordsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SearchTestRunTemplatesContext(ctx context.Context, request *SearchTestRunTemplates) (*SearchTestRunTemplatesResponse, error) {
	response := new(SearchTestRunTemplatesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SearchTestRunTemplates(request *SearchTestRunTemplates) (*SearchTestRunTemplatesResponse, error) {
	return service.SearchTestRunTemplatesContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SearchTestRunTemplatesLimitedContext(ctx context.Context, request *SearchTestRunTemplatesLimited) (*SearchTestRunTemplatesLimitedResponse, error) {
	response := new(SearchTestRunTemplatesLimitedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SearchTestRunTemplatesLimited(request *SearchTestRunTemplatesLimited) (*SearchTestRunTemplatesLimitedResponse, error) {
	return service.SearchTestRunTemplatesLimitedContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SearchTestRunTemplatesWithFieldsContext(ctx context.Context, request *SearchTestRunTemplatesWithFields) (*SearchTestRunTemplatesWithFieldsResponse, error) {
	response := new(SearchTestRunTemplatesWithFieldsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SearchTestRunTemplatesWithFields(request *SearchTestRunTemplatesWithFields) (*SearchTestRunTemplatesWithFieldsResponse, error) {
	return service.SearchTestRunTemplatesWithFieldsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SearchTestRunTemplatesWithFieldsLimitedContext(ctx context.Context, request *SearchTestRunTemplatesWithFieldsLimited) (*SearchTestRunTemplatesWithFieldsLimitedResponse, error) {
	response := new(SearchTestRunTemplatesWithFieldsLimitedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SearchTestRunTemplatesWithFieldsLimited(request *SearchTestRunTemplatesWithFieldsLimited) (*SearchTestRunTemplatesWithFieldsLimitedResponse, error) {
	return service.SearchTestRunTemplatesWithFieldsLimitedContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SearchTestRunsContext(ctx context.Context, request *SearchTestRuns) (*SearchTestRunsResponse, error) {
	response := new(SearchTestRunsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SearchTestRuns(request *SearchTestRuns) (*SearchTestRunsResponse, error) {
	return service.SearchTestRunsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SearchTestRunsLimitedContext(ctx context.Context, request *SearchTestRunsLimited) (*SearchTestRunsLimitedResponse, error) {
	response := new(SearchTestRunsLimitedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SearchTestRunsLimited(request *SearchTestRunsLimited) (*SearchTestRunsLimitedResponse, error) {
	return service.SearchTestRunsLimitedContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SearchTestRunsWithFieldsContext(ctx context.Context, request *SearchTestRunsWithFields) (*SearchTestRunsWithFieldsResponse, error) {
	response := new(SearchTestRunsWithFieldsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SearchTestRunsWithFields(request *SearchTestRunsWithFields) (*SearchTestRunsWithFieldsResponse, error) {
	return service.SearchTestRunsWithFieldsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SearchTestRunsWithFieldsLimitedContext(ctx context.Context, request *SearchTestRunsWithFieldsLimited) (*SearchTestRunsWithFieldsLimitedResponse, error) {
	response := new(SearchTestRunsWithFieldsLimitedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SearchTestRunsWithFieldsLimited(request *SearchTestRunsWithFieldsLimited) (*SearchTestRunsWithFieldsLimitedResponse, error) {
	return service.SearchTestRunsWithFieldsLimitedContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) SetTestStepsContext(ctx context.Context, request *SetTestSteps) (*SetTestStepsResponse, error) {
	response := new(SetTestStepsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) SetTestSteps(request *SetTestSteps) (*SetTestStepsResponse, error) {
	return service.SetTestStepsContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) UpdateSummaryDefectContext(ctx context.Context, request *UpdateSummaryDefect) (*UpdateSummaryDefectResponse, error) {
	response := new(UpdateSummaryDefectResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) UpdateSummaryDefect(request *UpdateSummaryDefect) (*UpdateSummaryDefectResponse, error) {
	return service.UpdateSummaryDefectContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) UpdateTestRecordContext(ctx context.Context, request *UpdateTestRecord) (*UpdateTestRecordResponse, error) {
	response := new(UpdateTestRecordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) UpdateTestRecord(request *UpdateTestRecord) (*UpdateTestRecordResponse, error) {
	return service.UpdateTestRecordContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) UpdateTestRecordAtIndexContext(ctx context.Context, request *UpdateTestRecordAtIndex) (*UpdateTestRecordAtIndexResponse, error) {
	response := new(UpdateTestRecordAtIndexResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) UpdateTestRecordAtIndex(request *UpdateTestRecordAtIndex) (*UpdateTestRecordAtIndexResponse, error) {
	return service.UpdateTestRecordAtIndexContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) UpdateTestRunContext(ctx context.Context, request *UpdateTestRun) (*UpdateTestRunResponse, error) {
	response := new(UpdateTestRunResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) UpdateTestRun(request *UpdateTestRun) (*UpdateTestRunResponse, error) {
	return service.UpdateTestRunContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) UpdateTestRunAttachmentContext(ctx context.Context, request *UpdateTestRunAttachment) (*UpdateTestRunAttachmentResponse, error) {
	response := new(UpdateTestRunAttachmentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) UpdateTestRunAttachment(request *UpdateTestRunAttachment) (*UpdateTestRunAttachmentResponse, error) {
	return service.UpdateTestRunAttachmentContext(
		context.Background(),
		request,
	)
}

func (service *testManagementWebService) UpdateWikiContentForTestRunContext(ctx context.Context, request *UpdateWikiContentForTestRun) (*UpdateWikiContentForTestRunResponse, error) {
	response := new(UpdateWikiContentForTestRunResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *testManagementWebService) UpdateWikiContentForTestRun(request *UpdateWikiContentForTestRun) (*UpdateWikiContentForTestRunResponse, error) {
	return service.UpdateWikiContentForTestRunContext(
		context.Background(),
		request,
	)
}
